#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.dirname(__FILE__)).gsub('bin', 'lib')

require 'website'
require 'website/blog'
require 'website/http'
require 'website/admin/controller'

server = Website::HTTP::Server.new
controller = Website::Blog::Controller.new
admin = Website::Admin::Controller.new
loop do
  server.serve(https: true) do |socket, request|
    next if(request.nil?)

    puts "request from ip " << request.ip_address << " at " << Time.now.httpdate << " -- " << request.request_line

    case(request.method)
    when 'GET'
      if(request.file_request?)
        Website::HTTP::Response.file_response(request.path, socket, admin.validate(request.cookies[:session_id], request.ip_address))
      elsif(request.static_html?)
        socket.print Website::HTTP::Response.static_html(request.path, admin.validate(request.cookies[:session_id], request.ip_address))
      elsif(request.path == '/admin-logout')
        socket.print admin.logout(request)
      elsif(request.path.start_with? '/validate')
        data = Website::Utils.parse_query(request.path).flatten
        value = controller.field_free?(data[0], data[1])
        socket.print Website::HTTP::Response[200, value]
      else
        socket.print controller.respond(request.path, admin.validate(request.cookies[:session_id], request.ip_address))
      end
    when 'POST'
      case request.path
      when '/new_blog_post'
        socket.print controller.post_new_blogpost(request.content, admin.validate(request.cookies[:session_id], request.ip_address))
      when '/admin-login'
        socket.print admin.login(request.content, request.ip_address)
      end
    when 'PUT'
      socket.print controller.put_updated_blogpost(request.content, admin.validate(request.cookies[:session_id], request.ip_address))
    when 'DELETE'
      socket.print controller.delete_blogpost(request.content, admin.validate(request.cookies[:session_id], request.ip_address))
    end
  end
end
