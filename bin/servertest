#!/usr/bin/env ruby

require './lib/website.rb'
require './lib/http_server.rb'
require './lib/blog/controller.rb'

server = Website::HTTPServer.new
controller = Website::Blog::Controller.new
loop do
  server.serve(https: true) do |socket, request|
    next if(request.nil?)

    STDERR.puts "#{request[:method]} #{request[:path]} #{request[:client_type]}"

    case(request[:method])
    when 'GET'
      if(request[:path].end_with?(*Website::HTTPServer::MIME_TYPES.keys))
        Website::HTTPServer.file_response(request[:path], socket, controller)
      elsif(request[:path].end_with?('html'))
        socket.print Website::HTTPServer.static_html(request[:path], controller)
      elsif(request[:path] == '/admin-logout')
        socket.print Website::HTTPServer.logout_admin
      elsif(request[:path].start_with? '/validate')
        data = Website::HTTPServer.parse_form_data(request[:path].split("?")[1]).to_a.flatten
        value = controller.field_free?(data[0], data[1])
        socket.print "HTTP/1.1 200 OK\r\n\r\n#{value}\r\n\r\n"
      else
        socket.print controller.respond(request[:path], request[:admin])
      end
    when 'POST'
      case request[:path]
      when '/new_blog_post'
        socket.print controller.post_new_blogpost(socket.read(request[:headers]['Content-Length'].to_i), request[:admin])
      when '/admin-login'
        socket.print controller.post_admin_login(socket.read(request[:headers]['Content-Length'].to_i), request[:ip])
      end
    when 'PUT'
      socket.print controller.put_updated_blogpost(socket.read(request[:headers]['Content-Length'].to_i), request[:admin])
    when 'DELETE'
      socket.print controller.delete_blogpost(socket.read(request[:headers]['Content-Length'].to_i), request[:admin])
    end
  end
end
