#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.dirname(__FILE__)).gsub('bin', 'lib')

require 'website'
require 'website/http_server'
require 'website/blog'
require 'website/http/response'

server = Website::HTTPServer.new
controller = Website::Blog::Controller.new
loop do
  server.serve(https: true) do |socket, request|
    next if(request.nil?)

    STDERR.puts request.request_line

    case(request.method)
    when 'GET'
      if(request.file_request?)
        Website::HTTP::Response.file_response(request.path, socket, request.admin?)
      elsif(request.static_html?)
        socket.print Website::HTTP::Response.static_html(request.path, request.admin?)
      elsif(request.path == '/admin-logout')
        socket.print Website::HTTP::Response.logout_admin
      elsif(request.path.start_with? '/validate')
        data = Website.parse_form_data(request.path.split("?")[1]).to_a.flatten
        value = controller.field_free?(data[0], data[1])
        socket.print Website::HTTP::Response.response(200, value)
      else
        socket.print controller.respond(request.path, request.admin?)
      end
    when 'POST'
      case request.path
      when '/new_blog_post'
        socket.print controller.post_new_blogpost(socket.read(request.headers[:content_length].to_i), request.admin?)
      when '/admin-login'
        socket.print controller.post_admin_login(socket.read(request.headers[:content_length].to_i), request.ip_address)
      end
    when 'PUT'
      socket.print controller.put_updated_blogpost(socket.read(request.headers[:content_length].to_i), request.admin?)
    when 'DELETE'
      socket.print controller.delete_blogpost(socket.read(request.headers[:content_length].to_i), request.admin?)
    end
  end
end
